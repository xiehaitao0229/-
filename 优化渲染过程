1.懒执行:
    懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，
    对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒


2.懒加载:懒加载就是将不关键的资源延后加载。

懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。
对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时
，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。

懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等


3.文件优化
    图片优化:
        1.不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。
        2.对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。
        3.小图使用 base64 格式
        4.将多个图标文件整合到一张图片中（雪碧图）
        5.选择正确的图片格式：
            对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，
            能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好
            小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替

    其他文件优化:
        1.CSS 文件放在 head 中
        2.服务端开启文件压缩功能
        3.将 script 标签放在 body 底部，因为 JS 文件执行会阻塞渲染。
          当然也可以把 script 标签放在任意位置然后加上 defer ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。
          对于没有任何依赖的 JS 文件可以加上 async ，表示加载和渲染后续文档元素的过程将和 JS 文件的加载与执行并行无序进行。
        4.执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 Webworker。Webworker 可以让我们另开一个线程执行脚本而不影响渲染。

    CDN:
        静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。
        对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。

使用 Webpack 优化项目:
                   对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩
                   使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码
                   优化图片，对于小图可以使用 base64 的方式写入文件中
                   按照路由拆分代码，实现按需加载
                   给打包出来的文件名添加哈希，实现浏览器缓存文件




